
I've now built the process for creating a temp version of Macports to avoid cross-infecting versions:

Assuming you have XCode command-line, Macports, and GNU autotools (autoconf, automake, and libtool) installed...

First, with the stdc++ lib transition, MacPorts has given up on 10.7 and 10.8. We're just using the old binaries for the 10.7 version.
Second, to configure MacPorts for compilation, you need to add `macosx_deployment_target  10.9` to the macports configuration file: `/opt/local/etc/macports/macports.conf`

The tricky part is getting it all to compile for previous versions of macOS, and avoid ones you may already have installed for your system. You can either completely empty out MacPorts directory /opt/bin and install using their package installer, OR create a temporary MacPorts directory as follows:
````
mkdir ~/mports
cd ~/mports
curl -L -o master.zip  https://github.com/macports/macports-base/archive/master.zip  && unzip master.zip  && rm master.zip
 
cd macports-base-master
MPPREFIX=~/macportsTest
export PATH=/bin:/sbin:/usr/bin:/usr/sbin
./configure --prefix=$MPPREFIX --with-applications-dir=$MPPREFIX/Applications && make && sudo make install
#sudo make install still necessary as it tries to give admin rights to various programs
export PATH=$MPPREFIX/bin:/bin:/sbin:/usr/bin:/usr/sbin
export MACOSX_DEPLOYMENT_TARGET=10.9
````
Edit $MPPREFIX/etc/macports/macports.conf to add `macosx_deployment_target  10.9` to the macports configuration file: `
`open $MPPREFIX/etc/macports/`

Then Create and cd into a new ctivoBinaries directory somewhere e.g.
````
mkdir ~/cTivoBinaries
cd ~/cTivoBinaries
````
 and execute:
````
MPPREFIX=~/macportsTest  # just making sure still set
#next line avoids accidentally calling system macports
export PATH=$MPPREFIX/bin:/bin:/sbin:/usr/bin:/usr/sbin

sudo port -v selfupdate
sudo port install ffmpeg +nonfree+gpl2
sudo port install argtable

git clone git://github.com/essandess/matryoshka-name-tool 
git clone git://github.com/erikkaashoek/Comskip
git clone git://github.com/CCExtractor/ccextractor
export LDFLAGS=$MPPREFIX/lib
cd comskip;  ./autogen.sh; ./configure; make; cd ..
cd ccextractor/mac; ./build.command; cd ../..
mkdir cTiVoBinaries; cd cTiVoBinaries; mkdir bin; mkdir lib; cd bin
cp ../../comskip/comskip comskip; cp $MPPREFIX/bin/mencoder mencoder; cp $MPPREFIX/bin/ffmpeg ffmpeg; cp ../../ccextractor/mac/ccextractor ccextractor
python ../../matryoshka-name-tool/matryoshka_name_tool.py -d ../lib/ -L $MPPREFIX/lib comskip ffmpeg mencoder

# Now Download latest handbrakeCLI into current directory (cTiVoBinaries/bin) from https://handbrake.fr/downloads2.php (not part of matryoshka process)

cd .. 
#now copy ctivoBinaries contents (./bin and ./lib) to the cTivo/ctivoBinaries folder in Xcode

#to clean things up, you can now delete ~/mports and ~/macportsTest

````

Note: Use the following command to check version number of all executables in a directory:
`for f in *; do otool -l $f| grep --label=$f -H '^  version 10.'; done`

Just for future reference, I ran into a problem, and needed to restart. So I just threw away the lib folder and ran matryoshka again. However, as the matryoshka tool changes the master binaries (mencoder, comskip and ffmpeg), the process needs fresh copies of the original binaries to go through it again. No error msgs, just no libs get copied Simple to fix, just create the ./bin directory again as well.

Also for future reference, the following patch will let downloading pre-compiled binaries honor the `macosx_deployment_target` as well, but it doesn't work with a custom installation with Macports in a alternative location. The reason is downloading precompiled binaries anywhere other than /opt/local will have internal references incorrectly pointing to /opt/local.

To get the "official" (downloaded) versions of all the library at the right version level, 
Now, assuming MPPREFIX = whichever macports you're using (~/Macports from above, or /opt/local for default.)
Edit  $MPPREFIX/libexec/macports/lib/port1.0/portutil.tcl with the following patch for get_portimage_name in  lines 2537-43
`open  $MPPREFIX/libexec/macports/lib/port1.0`
(Add macosx_deployment_target  to globals; calculate OSVersion, and change os.major to OSVersion twice.)
Specifically change  from:
```
    global portdbpath subport version revision portvariants os.platform os.major portarchivetype
    set ret "${subport}-${version}_${revision}${portvariants}.${os.platform}_${os.major}.[join [get_canonical_archs] -].${portarchivetype}"
    # should really look up NAME_MAX here, but it's 255 for all OS X so far
    # (leave 10 chars for an extension like .rmd160 on the sig file)
    if {[string length $ret] > 245 && ${portvariants} != ""} {
        # try hashing the variants
        set ret "${subport}-${version}_${revision}+[rmd160 string ${portvariants}].${os.platform}_${os.major}.[join [get_canonical_archs] -].${portarchivetype}"
````
TO:
````
    global portdbpath subport version revision portvariants os.platform os.major portarchivetype macosx_deployment_target
    set OSVersion ${os.major}
    if {[string first 10. $macosx_deployment_target] == 0} {
         set testVersion [string range $macosx_deployment_target 3 end]
         if {[string is integer -strict $testVersion]} {
            set OSVersion [expr {$testVersion + 4}]
         }
    }
    set ret "${subport}-${version}_${revision}${portvariants}.${os.platform}_${OSVersion}.[join [get_canonical_archs] -].${portarchivetype}"
    # should really look up NAME_MAX here, but it's 255 for all OS X so far
    # (leave 10 chars for an extension like .rmd160 on the sig file)
    if {[string length $ret] > 245 && ${portvariants} != ""} {
        # try hashing the variants
        set ret "${subport}-${version}_${revision}+[rmd160 string ${portvariants}].${os.platform}_${OSVersion}.[join [get_canonical_archs] -].${portarchivetype}"
````
